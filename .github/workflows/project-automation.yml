name: Project Automation

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened, closed]

permissions:
  contents: read
  issues: write
  pull-requests: write
  projects: write

jobs:
  issue_to_planned:
    if: github.event_name == 'issues' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Add Issue to Project and set Status=Planned
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const ownerLogin = 'buildingwithai';
            const projectNumber = 1; // https://github.com/users/buildingwithai/projects/1

            const issueNodeId = context.payload.issue.node_id;

            const projectData = await github.graphql(`
              query($login: String!, $number: Int!) {
                user(login: $login) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2FieldCommon {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }
            `, { login: ownerLogin, number: projectNumber });

            const project = projectData.user.projectV2;
            if (!project) {
              core.setFailed('Project not found');
              return;
            }

            const statusField = project.fields.nodes.find(f => f.name === 'Status' && f.options);
            if (!statusField) {
              core.setFailed('Status field not found in Project');
              return;
            }
            const plannedOpt = statusField.options.find(o => /planned/i.test(o.name)) || statusField.options[0];

            const addRes = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `, { projectId: project.id, contentId: issueNodeId });

            const itemId = addRes.addProjectV2ItemById.item.id;

            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) { clientMutationId }
              }
            `, {
              projectId: project.id,
              itemId,
              fieldId: statusField.id,
              optionId: plannedOpt.id,
            });

  pr_to_progress_or_done:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Add/Update PR in Project based on state
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const ownerLogin = 'buildingwithai';
            const projectNumber = 1; // https://github.com/users/buildingwithai/projects/1

            const pr = context.payload.pull_request;
            const prNodeId = pr.node_id;

            const projectData = await github.graphql(`
              query($login: String!, $number: Int!) {
                user(login: $login) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2FieldCommon { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
              }
            `, { login: ownerLogin, number: projectNumber });

            const project = projectData.user.projectV2;
            if (!project) {
              core.setFailed('Project not found');
              return;
            }

            const statusField = project.fields.nodes.find(f => f.name === 'Status' && f.options);
            if (!statusField) {
              core.setFailed('Status field not found in Project');
              return;
            }
            const inProgressOpt = statusField.options.find(o => /in\s*progress/i.test(o.name)) || statusField.options[0];
            const doneOpt = statusField.options.find(o => /done|completed/i.test(o.name)) || statusField.options[0];

            // Ensure PR exists as an item
            const addRes = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `, { projectId: project.id, contentId: prNodeId });
            const prItemId = addRes.addProjectV2ItemById.item.id;

            const isMerged = context.payload.action === 'closed' && pr.merged === true;
            const targetOption = isMerged ? doneOpt : inProgressOpt;

            // Update PR status
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) { clientMutationId }
              }
            `, {
              projectId: project.id,
              itemId: prItemId,
              fieldId: statusField.id,
              optionId: targetOption.id,
            });

            // Also move any linked issues (closing keywords) to the same status
            const closingIssues = [];
            const body = pr.body || '';
            const regex = /(close[sd]?|fix(e[sd])?|resolve[sd]?)\s+#(\d+)/ig;
            let m;
            while ((m = regex.exec(body)) !== null) {
              closingIssues.push(parseInt(m[3], 10));
            }
            if (closingIssues.length === 0) return;

            for (const issueNumber of closingIssues) {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });
              const nodeId = issue.data.node_id;
              const addIssueRes = await github.graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                    item { id }
                  }
                }
              `, { projectId: project.id, contentId: nodeId });
              const issueItemId = addIssueRes.addProjectV2ItemById.item.id;

              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) { clientMutationId }
                }
              `, {
                projectId: project.id,
                itemId: issueItemId,
                fieldId: statusField.id,
                optionId: targetOption.id,
              });
            }
