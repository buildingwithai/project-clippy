name: Add PR to Project

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull request number"
        required: true
        type: string
      status:
        description: "Override Status (In Progress, Done). Leave empty for auto"
        required: false
        type: string
      project_owner:
        description: "Project owner login (defaults to repo owner)"
        required: false
        type: string
      project_number:
        description: "Project number (defaults to 1)"
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write

jobs:
  add_pr_to_project:
    runs-on: ubuntu-latest
    steps:
      - name: Add PR to Project and set Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const prNumber = parseInt(core.getInput('pr_number'));
            const statusInput = (core.getInput('status') || '').trim();
            const ownerLogin = (core.getInput('project_owner') || context.repo.owner).trim();
            const projectNumber = parseInt(core.getInput('project_number') || '1');

            function normalize(s) { return (s || '').trim().toLowerCase(); }

            // 1) Fetch PR
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            // 2) Resolve Project and Status field/options
            const projectQuery = `
              query($login: String!, $number: Int!) {
                organization(login: $login) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2FieldCommon { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
                user(login: $login) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2FieldCommon { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
              }
            `;

            const pdata = await github.graphql(projectQuery, { login: ownerLogin, number: projectNumber });
            const project = pdata.organization?.projectV2 || pdata.user?.projectV2;
            if (!project?.id) {
              core.setFailed(`Project not found for owner=${ownerLogin} number=${projectNumber}`);
              return;
            }

            const statusField = (project.fields.nodes || []).find(f => normalize(f.name) === 'status');
            if (!statusField?.id || !statusField.options) {
              core.setFailed('Project Status field not found.');
              return;
            }

            const findStatusId = (label) => {
              const want = normalize(label);
              const opt = statusField.options.find(o => normalize(o.name) === want);
              return opt?.id || null;
            };

            const desiredStatus = statusInput || (pr.merged_at ? 'Done' : (pr.state === 'closed' ? 'Done' : 'In Progress'));
            const optionId = findStatusId(desiredStatus);
            if (!optionId) {
              core.setFailed(`Status option not found: ${desiredStatus}`);
              return;
            }

            // 3) Add PR to Project (or find existing item)
            let itemId = null;
            try {
              const addRes = await github.graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                    item { id }
                  }
                }
              `, { projectId: project.id, contentId: pr.node_id });
              itemId = addRes.addProjectV2ItemById.item.id;
            } catch (e) {
              core.warning(`addProjectV2ItemById failed for PR #${prNumber} (possibly already added): ${e?.errors?.[0]?.message || e.message}`);
              // Lookup existing item for this PR in the target Project
              try {
                const lookup = await github.graphql(`
                  query($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      pullRequest(number: $number) {
                        id
                        projectItems(first: 20) {
                          nodes { id project { id } }
                        }
                      }
                    }
                  }
                `, { owner: context.repo.owner, repo: context.repo.repo, number: prNumber });
                const nodes = lookup?.repository?.pullRequest?.projectItems?.nodes || [];
                const match = nodes.find(n => n?.project?.id === project.id);
                if (match?.id) {
                  itemId = match.id;
                } else {
                  core.setFailed(`No existing Project item found for PR #${prNumber}.`);
                  return;
                }
              } catch (qe) {
                core.setFailed(`Lookup existing item failed for PR #${prNumber}: ${qe.message}`);
                return;
              }
            }

            // 4) Update Status field
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) { projectV2Item { id } }
              }
            `, { projectId: project.id, itemId, fieldId: statusField.id, optionId });

            core.info(`PR #${prNumber} added/updated in Project with Status='${desiredStatus}'.`);
